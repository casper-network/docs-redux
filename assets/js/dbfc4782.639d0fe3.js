"use strict";(self.webpackChunkcspr_docs_redux=self.webpackChunkcspr_docs_redux||[]).push([[38749],{91895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"condor-jsonrpc","metadata":{"permalink":"/blog/condor-jsonrpc","source":"@site/blog/2024-10-06-rpc-changes.md","title":"JSON RPC Changes in Casper 2.0","description":"A discussion of the changes to the JSON RPC in Casper v2.0","date":"2024-10-06T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":false,"label":"JSON RPC","permalink":"/blog/tags/json-rpc"}],"readingTime":2.4,"hasTruncateMarker":true,"authors":[{"name":"Mel Padden","page":{"permalink":"/blog/authors/melpadden"},"title":"Head of Developer Relations for Casper Association","url":"https://github.com/melpadden","socials":{"x":"https://x.com/mel_casper"},"permalink":"/melpadden","imageURL":"https://github.com/melpadden.png","key":"melpadden"}],"frontMatter":{"title":"JSON RPC Changes in Casper 2.0","description":"A discussion of the changes to the JSON RPC in Casper v2.0","slug":"condor-jsonrpc","date":"2024-10-06T18:00","authors":["melpadden"],"tags":["condor","json-rpc"],"hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Zug consensus in Casper 2.0","permalink":"/blog/condor-zug"}},"content":"## Introduction\\n\\nThis article is intended for developers consuming the Casper 2.0 (AKA Condor) JSON RPC, such as dApp developers, SDK developers, or others relying on the JSON-RPC API. In this article we examine the JSON-RPC  and break down the [differences between v1.5.6 and v2.0.0](#differences-between-v15-and-v20).\\n\\nSince the network\'s inception, the Casper node has exposed an API over HTTP, using JSON, which is known as the JSON-RPC. This API allows client software such as dApps and SDKs to communicate and interact with the node, giving access to query node state, chain state, balance details and other information, as well as to write information to the chain by submitting transactions.  \\n\\n\x3c!-- truncate --\x3e\\n\\n## Changes for v2.0\\n\\n### Casper Sidecar\\n\\nOne of the major changes in the Condor upgrade is the new [casper-sidecar](https://github.com/casper-network/casper-sidecar). The sidecar runs in a **dedicated** process and and is bound to a node\'s binary port and/or SSE port.  The sidecar assumes **all** responsibility for running the JSON-RPC server and exposing the JSON-RPC endpoints to the internet, i.e. the node software itself no longer exposes a JSON RPC API to the consumer - <u>this job is now done by the sidecar</u>.  \\n\\nBecause the sidecar runs in a dedicated process, it is possible to run a sidecar upon a different machine to the node.  However in practice, most node operators will likely operate a sidecar process on the same machine as the node.  Furthermore an operator\'s deployment setup is opaque to to a DApp that interacts with the JSON-RPC API via an SDK.  \\n\\nThere are several benefits to moving the JSON-RPC API to a sidecar:  \\n- The JSON-RPC API can now evolve independently of the node  \\n- A node operator now has a finer degree of control over their operational setup\\n- The sidecar reduces the amount of work that the node itself has to do, thereby simplifying the deployment of alternative node implementations (e.g. mojo, go, zig, c++)\\n\\n### Node Binary Port\\n\\nThe Casper 2.0 Node now exposes a pure Binary Port API, which allows connection over TCP/IP and pure binary serialization for your remote procedure calls.  Depending on your use case, you may be interested in considering this option for interacting with Casper Condor. In general, the binary port offers better performance and features compared to the JSON RPC.  A detailed discussion of the Binary Port will be contained in a future article.  It is anticipated that all SDKs will be updated so as to support the new Binary Port API.\\n\\n#### JSON-RPC Differences  \\n\\nThe biggest immediately obvious change in the RPC is the change in name from deploy to transaction.  Casper 1.X used the name \\"deploy\\" for a unit of work submitted to the blockchain, in Condor a unit of work is now renamed as \\"Transaction\\". \\n\\n### JSON-RPC Schema Definitions\\n\\nSee [here](./_024-jsonrpc-comp/rpc-1.5/schema.json) for Casper 1.5 node JSON-RPC.\\n\\nSee [here](./_024-jsonrpc-comp/rpc-2.0/schema.json) for Casper 2.0 node JSON-RPC.\\n\\n## Table of v1.5 & v2.0 JSON-RPC API differences\\n\\n| Function in v1.5                      | Function in v2.0                      |Remarks|\\n| ---                                   | ---                                   | --- |\\n| [account_put_deploy](./_024-jsonrpc-comp/rpc-1.5/account_put_deploy.json)                                      | [account_put_transaction](./_024-jsonrpc-comp/rpc-2.0/account_put_transaction.json)                            | [Renamed](./_024-jsonrpc-comp/account_put_transaction.md)     |  \\n| [chain_get_block_transfers](./_024-jsonrpc-comp/rpc-1.5/chain_get_block_transfers.json)                        | [chain_get_block_transfers](./_024-jsonrpc-comp/rpc-2.0/chain_get_block_transfers.json)                        | Unchanged     |\\n| [chain_get_block](./_024-jsonrpc-comp/rpc-1.5/chain_get_block.json)                                            | [chain_get_block](./_024-jsonrpc-comp/rpc-2.0/chain_get_block.json)                                            | [Now returns Block with Signatures](./_024-jsonrpc-comp/chain_get_block.md)         |\\n| [chain_get_era_info_by_switch_block](./_024-jsonrpc-comp/rpc-1.5/chain_get_era_info_by_switch_block.json)      | [chain_get_era_info_by_switch_block](./_024-jsonrpc-comp/rpc-2.0/chain_get_era_info_by_switch_block.json)      | Unchanged     |\\n| [chain_get_era_summary](./_024-jsonrpc-comp/rpc-1.5/chain_get_era_summary.json)                                | [chain_get_era_summary](./_024-jsonrpc-comp/rpc-2.0/chain_get_era_summary.json)                                | Unchanged     |\\n| [chain_get_state_root_hash](./_024-jsonrpc-comp/rpc-1.5/chain_get_state_root_hash.json)                        | [chain_get_state_root_hash](./_024-jsonrpc-comp/rpc-2.0/chain_get_state_root_hash.json)                        | Unchanged     |\\n| [info_get_chainspec](./_024-jsonrpc-comp/rpc-1.5/info_get_chainspec.json)                                      | [info_get_chainspec](./_024-jsonrpc-comp/rpc-2.0/info_get_chainspec.json)                                      | Unchanged     |\\n| [info_get_deploy](./_024-jsonrpc-comp/rpc-1.5/info_get_deploy.json)                                            | [info_get_transaction](./_024-jsonrpc-comp/rpc-2.0/info_get_transaction.json)                                  | [Renamed](./_024-jsonrpc-comp/info_get_transaction.md)    |\\n| [info_get_peers](./_024-jsonrpc-comp/rpc-1.5/info_get_peers.json)                                              | [info_get_peers](./_024-jsonrpc-comp/rpc-2.0/info_get_peers.json)                                              | Unchanged     |\\n| [info_get_status](./_024-jsonrpc-comp/rpc-1.5/info_get_status.json)                                            | [info_get_status](./_024-jsonrpc-comp/rpc-2.0/info_get_status.json)                                            | Latest [switch block hash](./_024-jsonrpc-comp/rpc-2.0/components/BlockHash.json) included in result     |\\n| [info_get_validator_changes](./_024-jsonrpc-comp/rpc-1.5/info_get_validator_changes.json)                      | [info_get_validator_changes](./_024-jsonrpc-comp/rpc-2.0/info_get_validator_changes.json)                      | Unchanged     |\\n| [query_balance](./_024-jsonrpc-comp/rpc-1.5/query_balance.json)                                                | [query_balance](./_024-jsonrpc-comp/rpc-2.0/query_balance.json)                                                | Unchanged     |\\n|                                                                                                               | [query_balance_details](./_024-jsonrpc-comp/rpc-2.0/query_balance_details.json)                                | Added         |\\n| [query_global_state](./_024-jsonrpc-comp/rpc-1.5/query_global_state.json)                                      | [query_global_state](./_024-jsonrpc-comp/rpc-2.0/query_global_state.json)                                      | Unchanged     |\\n| [state_get_account_info](./_024-jsonrpc-comp/rpc-1.5/state_get_account_info.json)                              | [state_get_account_info](./_024-jsonrpc-comp/rpc-2.0/state_get_account_info.json)                              | Unchanged     |\\n| [state_get_auction_info](./_024-jsonrpc-comp/rpc-1.5/state_get_auction_info.json)                              | [state_get_auction_info](./_024-jsonrpc-comp/rpc-2.0/state_get_auction_info.json)                              | Unchanged     |\\n| [state_get_balance](./_024-jsonrpc-comp/rpc-1.5/state_get_balance.json)                                        | [state_get_balance](./_024-jsonrpc-comp/rpc-2.0/state_get_balance.json)                                        | [Balance now reflects all active holds](./_024-jsonrpc-comp/state_get_balance.md)     |\\n| [state_get_dictionary_item](./_024-jsonrpc-comp/rpc-1.5/state_get_dictionary_item.json)                        | [state_get_dictionary_item](./_024-jsonrpc-comp/rpc-2.0/state_get_dictionary_item.json)                        | Unchanged     |\\n| [state_get_item](./_024-jsonrpc-comp/rpc-1.5/state_get_item.json)                                              | [state_get_entity](./_024-jsonrpc-comp/rpc-2.0/state_get_entity.json)                                          | Renamed    |\\n\\n\\n---\\n## Summary\\n\\nThe major changes in the JSON-RPC between v1.5.6 and v2.0.0 are:\\n\\n- The [casper-sidecar](https://github.com/casper-network/casper-sidecar) is now responsible for serving the JSON-RPC API.\\n- The sidecar may also expose the Server Side Events API, this is of some relevance to developers relying upon the Casper Event Standard (CES).\\n- Deploys are now called Transactions as per the industry norm.  There are differences in the representation of these data structures."},{"id":"condor-zug","metadata":{"permalink":"/blog/condor-zug","source":"@site/blog/2024-10-03-zug.md","title":"Zug consensus in Casper 2.0","description":"A discussion of the Zug consensus model","date":"2024-10-03T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":false,"label":"Consensus","permalink":"/blog/tags/consensus"}],"readingTime":1.5033333333333334,"hasTruncateMarker":true,"authors":[{"name":"Alexander Limonov","page":{"permalink":"/blog/authors/alexanderlimonov"},"title":"Economist for Casper Labs","url":"https://github.com/AlexanderLimonov","permalink":"/alexanderlimonov","imageURL":"https://github.com/AlexanderLimonov.png","key":"alexanderlimonov"}],"frontMatter":{"title":"Zug consensus in Casper 2.0","description":"A discussion of the Zug consensus model","slug":"condor-zug","date":"2024-10-03T18:00","authors":["alexanderlimonov"],"tags":["condor","consensus"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"JSON RPC Changes in Casper 2.0","permalink":"/blog/condor-jsonrpc"},"nextItem":{"title":"Transactions in Casper 2.0","permalink":"/blog/condor-transaction"}},"content":"## The Zug consensus mechanism\\nIn this article we will break down the Zug consensus mechanism in Casper v2.0\\n\\n\x3c!-- truncate --\x3e\\n\\n## Highway\\nThe Highway consensus protocol, developed by CasperLabs, was the first in-house consensus protocol that was deployed with the launch of 1.0 mainnet. \\n\\n### Concept\\nHighway\'s distinctive feature is the ability to explicitly vary the \\"speed\\" of different validators by dynamically altering a parameter that governs which and how many rounds they participate in within an era.\\n\\n### Limitations with Highway\\nHighway is highly complex and opaque. It is difficult to develop a good intuition for how the internal state of the protocol evolves. Additionally, the ability to vary validators \\"speed\\" was likely of limited benefit, since, in practice, the maximum \\"speed\\" (i.e., block time) was set conservatively.\\n\\n## Zug\\nDue to limitations of Highway, a simpler protocol, called Zug, was developed. Its internal state is much simpler, allowing the same number of validators to quickly reach consensus with fewer messages.\\n\\n### How Zug works\\nThe Zug protocol can be summarized as follows:\\n\\n* In every round, the round leader proposes a new block, `B`.\\n* Every validator creates and broadcasts an _echo_ message, with a signature of `B`.\\n* When a suitable block `B` has received echoes from 67% of the validators:\\n    * The next round begins. The next leader can propose a child of `B`.\\n    * Every validator signs and broadcasts a _vote_ message, voting `yes`.\\n* If this does not happen before a timeout, the validators vote `no` instead.\\n    * If there are `no` votes from 67%, the next round begins, too.\\n      The next leader can propose a child from an earlier block and skip this round.\\n* If there are `yes` votes from 67%, `B` is finalized and gets executed, together with all its ancestors. (Usually, the next round has already started at this point.)\\n\\n\\nNotice that proposals, votes, and echoes are broadcast, so if one correct node receives a message, all nodes will eventually receive it. An honest validator sends only one echo or vote per round. So, unless 34% of validators double-sign, at most one block per round gets 67% echoes, and no finalized block can ever be skipped, ensuring safety. As long as there are 67% of echoes for a proposal, the next round begins and Zug doesn\'t get stuck. If there are not, everyone votes `no`, and the next round also begins.\\n\\n## Impact on validator set size\\nBecause Zug has a smaller communication overhead, it may allow an increase in the size of the validator set.\\n\\n### Summary\\nThe adoption of the Zug protocol represents a leap for ward for the Casper network in terms of efficiency and extensibility."},{"id":"condor-transaction","metadata":{"permalink":"/blog/condor-transaction","source":"@site/blog/2024-10-04-transactions.md","title":"Transactions in Casper 2.0","description":"A discussion of the new Transaction data type","date":"2024-10-03T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":true,"label":"smartcontracts","permalink":"/blog/tags/smartcontracts"}],"readingTime":0.9933333333333333,"hasTruncateMarker":true,"authors":[{"name":"Mark Greenslade","page":{"permalink":"/blog/authors/asladeofgreen"},"title":"Gead of R&D for Casper Association","url":"https://github.com/asladeofgreen","permalink":"/asladeofgreen","imageURL":"https://github.com/asladeofgreen.png","key":"asladeofgreen"}],"frontMatter":{"title":"Transactions in Casper 2.0","description":"A discussion of the new Transaction data type","slug":"condor-transaction","date":"2024-10-03T18:00","authors":["asladeofgreen"],"tags":["condor","smartcontracts"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Zug consensus in Casper 2.0","permalink":"/blog/condor-zug"},"nextItem":{"title":"validator rewards in Casper 2.0","permalink":"/blog/condor-validator-rewards"}},"content":"## Transactions in Casper v2.0\\n\\nIn this article we will examine user transactions (previously called deploys).  More specifically we will review the expanded set of transaction types and how they are processed by the node\'s execution engine.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Transaction Types\\n\\nTransactions encapsulate user intents.  For example, if Alice intends to transfer CSPR to Bob, she uses software (e.g. a wallet) to construct and sign a transaction that is subsequently dispatched to a trusted node for processing by the network.\\n\\nTransactions may be either \'native\' or \'custom\':\\n\\n- Native transactions are those that interact with system contracts such as mint and/or auction.  They do not require any WASM payload to be constructed,  are normally compact in size, and are processed directly on the metal, i.e. host-side.\\n\\n- Custom transactions are those that interact with the system via either on-chain smart contracts or in-line session logic.  All such interactions are based upon user-defined WASM binaries, and are executed within one of the node\'s supported virtual machines.\\n\\nIn Casper 1.0 there was a single native transaction type (Transfer), and a set of custom transaction types (ContractByHash, ContractByHashVersioned, ContractByName, ContractByNameVersioned, ContractBytes). In Casper 2.0 the set of both native & custome transaction types have been expanded.\\n\\nCasper 2.0 Native Transaction Types:\\n\\n- System.Mint.Transfer\\n- System.Mint.Burn\\n- System.Auction.Bid.Submit\\n- System.Auction.Bid.Withdraw\\n- System.Auction.Delegation.Redelegate\\n- System.Auction.Delegation.Submit\\n- System.Auction.Delegation.Withdraw\\n- System.Auction.Staking.Submit\\n- System.Auction.Staking.Withdraw\\n\\nNot all work is identical, e.g. a base token (cspr) transfer differs from a smart contract execution.  \\n\\nCasper 1.0 supported a set of 6 transaction types, in Casper 2.0 the set is both refined and expanded.\\n\\nThe Transaction stat type has a number of changes from its predecessor, the Deploy. For a detailed discussion of these differences you can see the casper documentation of this discussion of the JSON schema."},{"id":"condor-validator-rewards","metadata":{"permalink":"/blog/condor-validator-rewards","source":"@site/blog/2024-08-20-validator-rewards.md","title":"validator rewards in Casper 2.0","description":"A discussion of validator rewards under Casper 2.0","date":"2024-08-20T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":false,"label":"Validators","permalink":"/blog/tags/validators","description":"Validators"}],"readingTime":4.64,"hasTruncateMarker":true,"authors":[{"name":"Mel Padden","page":{"permalink":"/blog/authors/melpadden"},"title":"Head of Developer Relations for Casper Association","url":"https://github.com/melpadden","socials":{"x":"https://x.com/mel_casper"},"permalink":"/melpadden","imageURL":"https://github.com/melpadden.png","key":"melpadden"},{"name":"Alexander Limonov","page":{"permalink":"/blog/authors/alexanderlimonov"},"title":"Economist for Casper Labs","url":"https://github.com/AlexanderLimonov","permalink":"/alexanderlimonov","imageURL":"https://github.com/AlexanderLimonov.png","key":"alexanderlimonov"}],"frontMatter":{"title":"validator rewards in Casper 2.0","description":"A discussion of validator rewards under Casper 2.0","slug":"condor-validator-rewards","date":"2024-08-20T18:00","authors":["melpadden","alexanderlimonov"],"tags":["condor","validators"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Transactions in Casper 2.0","permalink":"/blog/condor-transaction"},"nextItem":{"title":"Casper Docs Redux!","permalink":"/blog/welcome-docs-redux"}},"content":"In this post we discuss the changes to validator rewards in Casper v2.0.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Economics of consensus\\n\\nProof of Stake consensus protocols explicitly impose an assumption that a critical portion of the validator set, by weight, remains honest. Normally, just as it is in Highway and will be in Zug, there is a requirement that at least 2/3 of the weight remain honest for the chain to continue to operate normally. \\n\\nProof of Stake protocols do not typically describe the particular incentives that should keep validators honest, however, so some incentive scheme must be independently developed to ensure that the assumptions of the safety and liveness theorems actually hold. Such a scheme may directly reward some measure of performance within the protocol model, but an alternative model can choose to reward consensus-independent measures of chain performance, such as chain progress.\\n\\nIncentive rewards in Casper come from issuance of new token at the end of each era, with quantity derived from an inflation parameter in the chainspec. The minted token are distributed in proportion to weight, assuming nominal performance of the chain.\\n\\n## Casper 1.X Highway-specific incentives\\n\\nThe 1.0 rewards scheme introduced with Highway on mainnet is directly tied to the details of Highway consensus. Rewards are maximized when all validators regularly send messages necessary to finalize a block within a time limit in a particular round. \\n\\nDegrading platform performance by delaying block finalization is disadvantageous for all validators, even those not directly responsible for the delay, which is a means of aligning validator incentives with each other by discouraging censorship of consensus messages produced by others. \\n\\nThe weakness of the 1.0 rewards model is that it is difficult to understand and maintain. Additionally, by focusing on a consensus-specific measure of performance, it does not directly incentivize the observable outcome that we actually care about, which is public knowledge of block finality.  \\n\\n## Casper 2.0 \\n\\n### Public knowledge of finality\\n\\nA necessary outcome of a safe consensus process over possible histories of the chain is that all honest validators should have at least mutual knowledge of the canonical history. That is, each honest validator should believe that a particular history is the correct one, and this history should be the same for all validators.\\n\\nThis mutual knowledge is sufficient for validators to make further progress in building up the canonical history. However, for a user of the blockchain, establishing confidence in the correct operation of the protocol and the identity of the canonical history requires that the validators\' knowledge of the canonical history be attested publicly.\\n\\nIn Casper, validators create and distribute finality signatures, which are cryptographically secure witnesses of their belief in the finality of a particular block. Under 1.X, however, these are not easily verifiable by users and play no role in the reward mechanism, despite being a critical tool for building user confidence in the canonical history. In 2.0, we propose to allocate rewards for creation and publication of one\'s own and other validators\' finality signatures.\\n\\n### Design\\n\\nRewards that promote public knowledge of finality naturally suggest rewarding publicly observable behaviors, rather than metrics only readily visible to the consensus component. This, together with the expected transition from Highway to Zug, naturally led to a system that rewards three publicly observable activities\\n\\n* Block proposal\\n* Signature creation\\n* Signature publication\\n\\nNote that we expect very little, if any, rewards to be allocated for block proposals on mainnet, but the feature remains available.\\n\\nThe rewards apportioned to a block, under nominal operating conditions, are the same as they are under 1.X, that is, they amount to total supply at last era\'s end multiplied by an inflation factor derived from the chainspec. \\"Nominal\\" here means that all rounds result in a finalized block and that all finality signatures are collected and published.\\n\\nThe rewards are apportioned to these three activities based on chainspec settings governing the split between block proposals and signature rewards, and, within signature rewards, between finality signature creation and publication.\\n\\nNote that this split ensures that validators\' incentives are aligned, in the sense that other validators\' correct operation is beneficial for each validator. This is because each validator is rewarded for publishing other validators\' signature, and because each validator benefits from other publishing its own signatures.\\n\\n#### Expected rewards & volatility\\n\\nUnder nominal operating conditions, the total rewards for each validator will be proportional to weight in the long run. Depending on the particular values of the parameters governing the split between the three components of the rewards, short-run rewards can be more or less variable.\\n\\nIn the long run, with a stable validator set, each validator eventually produces a number of blocks proportional to its weight. Small validators can do months between producing a block, and will experience variable wait times between such occasions. However, each validator is supposed to produce signatures for each finalized block, so moving the allocation towards signature creation can reduce volatility.\\n\\n#### Rewards formula\\n\\nThe rewards have three additive components, one for each observable activity we described in the previous section. The era rewards for a particular validator can be described using a simple formula, given below. Note that the formula does not exactly correspond to the actual on-chain calculation, for technical reasons we discuss in a further section.\\n\\nLet us define some notation first\\n\\n**N** - expected number of blocks in an era\\n\\n**N*** - the *set* of observed blocks in an era\\n\\n**R** - total potential reward pot for the era (i.e., nominal inflation based on chainspec and current supply)\\n\\n**r** - fraction of reward pot dedicated to block production rewards\\n\\n**f** - finder\'s fee for finality signatures\\n\\n**I** - validator index set\\n\\n**i**: **N*** -> {0,1} - indicator function for blocks produced by validator i (with abuse of notation)\\n\\n**w**: **I** -> [0,1] - validator\'s weight\\n\\n**W** - total weight of the validator set\\n\\n**S**: **N*** -> **P(I)** - set of validators associated with finality signatures for a particular observed block\\n\\n**s_i**: **N*** -> {0,1} - indicator functions for existence of finality signatures associated with validator i for particular observed blocks\\n\\nNow, we can use our defined symbols to concisely describe era rewards for a particular validator\\n\\nEra rewards for validator i = \\n\\n**\u03a3** (n in **N***) **i(n)** * (**rR/N**) (block production)\\n\\n&#43; **\u03a3** (n in **N***) **i(n)** * **\u03a3** (j in **S(n)**) (**w(j)/W**) * (**f(1-r)R/N**) (finality signature publication)  \\n\\n&#43; **\u03a3** (n in **N***) **s_i(n)** * (**w(i)/W**) * (**(1-f)(1-r)R/N**) (finality signature contribution)\\n\\nThe meanings of the three additive components in the formula above are, in order\\n\\n* Sum over blocks, discarding blocks not proposed by this validator\\n  * For each block, add the per-block reward allocation for block proposals from the total pot for the era\\n* Sum over blocks, discarding blocks not proposed by this validator\\n  * For each block, sum over published signatures\\n    * For each signature, add the per-block reward allocation for signature publication from the total pot for the era, weighing each signature by its creator\'s proportion of total validator weight\\n* Sum over blocks, discarding those for which this validator did not create a signature\\n  * For each block, add the per-block reward allocation for signature creation from the total pot for the era, weighing it by the validator\'s proportion of total validator weight\\n\\n#### Notes on implementation\\n\\nIn a real network, messages arrive with a delay. This means that we cannot guarantee that all finality signatures for an era will arrive in time to be used by the rewards calculation carried out in the switch block.\\n\\nWe solve this problem by allowing publication of finality signatures for a preceding era. As long as the validator set stays unchanged, in the long run the formula above is a near-exact representation of rewards. \\n\\nHowever, entry of new validators means that some of the publication rewards may be distributed among more validators than just those who participated in the era in which the signatures were created.\\n\\n### Impact on validator revenue\\n\\nNo impact is expected on average validator rewards under nominal operating conditions. Note that shortfall in signature creation, or network issues preventing the propagation of such signatures, can reduce rewards, even for validators who honestly publish all incoming signatures and honestly create signatures for each block. Additionally, allocating more rewards to block proposals or finality publication can make the rewards more volatile."},{"id":"welcome-docs-redux","metadata":{"permalink":"/blog/welcome-docs-redux","source":"@site/blog/2024-08-15-hello-blogworld.md","title":"Casper Docs Redux!","description":"The first blog post using the new Docs portal.","date":"2024-08-15T18:00:00.000Z","tags":[{"inline":true,"label":"hello","permalink":"/blog/tags/hello"},{"inline":true,"label":"new docs","permalink":"/blog/tags/new-docs"},{"inline":true,"label":"docs-redux","permalink":"/blog/tags/docs-redux"}],"readingTime":0.39666666666666667,"hasTruncateMarker":true,"authors":[{"name":"Mel Padden","page":{"permalink":"/blog/authors/melpadden"},"title":"Head of Developer Relations for Casper Association","url":"https://github.com/melpadden","socials":{"x":"https://x.com/mel_casper"},"permalink":"/melpadden","imageURL":"https://github.com/melpadden.png","key":"melpadden"}],"frontMatter":{"title":"Casper Docs Redux!","description":"The first blog post using the new Docs portal.","slug":"welcome-docs-redux","date":"2024-08-15T18:00","authors":["melpadden"],"tags":["hello","new docs","docs-redux"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"validator rewards in Casper 2.0","permalink":"/blog/condor-validator-rewards"},"nextItem":{"title":"Addressable Entity in Casper 2.0","permalink":"/blog/addressable-entity"}},"content":"Welcome to the new-look Casper documentation portal. We have put a lot of thought into making the documentation more accessible, easier to move around, and easier on the eye. We have stripped away some visual clutter to allow you to focus on the content, and introduced versioning so that you can compare versions to see what has changed. This is obviously with a mind to the Condor changeover, as we thought it made a lot of sense to allow you to move between versions of the docs as you upgrade your systems and applications for Casper v2.0.\\n\\nPlease enjoy and if you have any comments, suggestions or errata, please email [devrel@casper.network](mailto:devrel@casper.network) with your contribution or query.\\n\\n\x3c!-- truncate --\x3e"},{"id":"addressable-entity","metadata":{"permalink":"/blog/addressable-entity","source":"@site/blog/2024-07-17-addressable-entity.md","title":"Addressable Entity in Casper 2.0","description":"An introduction to the Addressable Entity concept.","date":"2024-07-17T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"}],"readingTime":2.4433333333333334,"hasTruncateMarker":true,"authors":[{"name":"Stanislaw Czembor","page":{"permalink":"/blog/authors/sczembor"},"title":"Developer Advocate for Casper Association","url":"https://github.com/sczembor","permalink":"/sczembor","imageURL":"https://github.com/sczembor.png","key":"sczembor"},{"name":"Mel Padden","page":{"permalink":"/blog/authors/melpadden"},"title":"Head of Developer Relations for Casper Association","url":"https://github.com/melpadden","socials":{"x":"https://x.com/mel_casper"},"permalink":"/melpadden","imageURL":"https://github.com/melpadden.png","key":"melpadden"}],"frontMatter":{"title":"Addressable Entity in Casper 2.0","description":"An introduction to the Addressable Entity concept.","slug":"addressable-entity","date":"2024-07-17T18:00","authors":["sczembor","melpadden"],"tags":["condor"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Casper Docs Redux!","permalink":"/blog/welcome-docs-redux"},"nextItem":{"title":"Fee Elimination in Condor","permalink":"/blog/condor-fee-elimination"}},"content":"Casper 2.0 introduces significant changes in the representation and management of accounts and smart contracts, through the introduction of the `AddressableEntity` type. This new structure replaces the separate `AccountHash` and `ContractHash` used in Casper 1.x, bringing a unified approach to interact with entities on the network. Contracts can now hold and manage funds directly through associated purses, similar to user accounts. They can also manage their own keys, enabling more sophisticated access control.\\n\\nIn this article, we\'ll dive into the details of `AddressableEntity`, exploring its structure and functionalities.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Key Concepts\\n\\n**AddressableEntity**\\n\\nAt its core, an `AddressableEntity` is a versatile data structure that represents both accounts and smart contracts within the Casper global state. It encapsulates all the necessary information for identifying and managing these entities. An `AddressableEntity` provides a unified interface for various operations, including authorization, access control, and execution of functions.\\n\\n**EntityAddr**\\n\\nAn `EntityAddr` serves as the address for an `AddressableEntity`. It not only encodes the unique identifier (hash) of the entity but also its type. There are three distinct variants of `EntityAddr`:\\n\\n1.  **System:** Used for built-in, native contracts crucial for the blockchain\'s operation.\\n2.  **Account:**  Represents a user\'s account.\\n3.  **SmartContract:** Represents a user-deployed smart contract.\\n\\n**AddressableEntityHash**\\n\\nThe `AddressableEntityHash` is a newtype wrapper around a 32-byte hash (`HashAddr`). This hash functions as a unique identifier for the `AddressableEntity`, typically derived from either the account\'s public key or the smart contract\'s hash using hashing algorithm.\\n\\n## The inner workings of AddressableEntity\\n\\nLet\'s dive into the critical components within an `AddressableEntity`:\\n\\n*   **`protocol_version` (ProtocolVersion):**  This field indicates the protocol version that the entity is compatible with. It ensures backward compatibility and allows for smooth upgrades as the Casper network evolves.\\n*   **`entity_kind` (EntityKind):** As mentioned earlier, this enum determines the type of entity \u2013 System, Account, or SmartContract.\\n*   **`associated_keys` (AssociatedKeys):** This data structure stores a map of public keys authorized to interact with the entity. Each key is associated with a weight that represents its voting power in decision-making processes within the entity.\\n*   **`action_thresholds` (ActionThresholds):** These thresholds define the minimum combined weight of associated keys required to authorize specific actions. The three main action types are `deployment`, `key_management`, and `upgrade_management`. Each action type has its own weight threshold, allowing for fine-grained control over permissions.\\n*   **`entry_points` (EntryPoints):** This component is relevant only for smart contracts. It defines the functions (entry points) that external actors can call on the contract, along with their parameters, return types, and access permissions.\\n\\n## Obtaining and converting Keys\\n\\nIn Casper 2.0, developers will primarily work with `Key::AddressableEntity` when referring to accounts and smart contracts. Here\'s how you can create them and convert between different key formats:\\n\\n### Creating AddressableEntity Keys\\n\\n**From Account Hash:**\\n\\n```rust\\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::Account(account_hash)); \\n```\\n\\n**From Smart Contract Hash:**\\n\\n```rust\\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::SmartContract(contract_hash));\\n```\\n\\n### Extracting AccountHash or ContractHash from a Key\\nYou can extract the `AccountHash` or `ContractHash` from a `Key::AddressableEntity` using pattern matching:\\n\\n```rust\\n//For Accounts\\nlet account_hash = match addressable_entity_key {\\n    Key::AddressableEntity(EntityAddr::Account(hash)) => hash,\\n    _ => panic!(\\"Not an account key\\"), \\n};\\n//For Contracts\\nlet contract_hash = match addressable_entity_key {\\n    Key::AddressableEntity(EntityAddr::SmartContract(hash)) => hash,\\n    _ => panic!(\\"Not a contract key\\"), \\n};\\n```\\n\\n## The Address Merge in Condor\\n\\nThe \\"Address Merge\\" in the Condor upgrade of Casper is a foundational shift, impacting how accounts and smart contracts are identified and interacted with.  \\n\\n**Global State Transformation:**\\n\\nPost-Condor, all accounts and smart contract addresses residing within the global state will be automatically migrated to the `AddressableEntity` structure. This means the network itself will recognize and handle these entities using the new format.\\n\\n**Smart Contract Compatibility Considerations:**\\n\\nWhile the global state automatically transitions to `AddressableEntity`, existing contracts are expected to function without any modification. \\n\\n* **Caller Identification:**\\nExisting host functions used to identify the caller within your contract will continue to work as before, ensuring no disruption to your contract\'s functionality. However, new host functions have been introduced that are specifically designed to work with the AddressableEntity format.\\n\\n* **External Contract Interaction:** Other contracts may have updated their interfaces to accept AddressableEntity arguments. Its worth to verify the argument types to avoid potential errors.\\n\\n> **Note**\\n> * Upgrading a contract to a newer version may involve complexities, such as changes to the contract\'s addressable hash. These changes might require coordination with centralized and decentralized exchanges, as well as communication with your community to ensure a smooth transition."},{"id":"condor-fee-elimination","metadata":{"permalink":"/blog/condor-fee-elimination","source":"@site/blog/2024-07-16-fee-elimination.md","title":"Fee Elimination in Condor","description":"A discussion of the Fee Elimination feature in Casper 2.0","date":"2024-07-16T22:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":true,"label":"features","permalink":"/blog/tags/features"},{"inline":true,"label":"tokenomics","permalink":"/blog/tags/tokenomics"}],"readingTime":5.8933333333333335,"hasTruncateMarker":true,"authors":[{"name":"Dylan Ireland","page":{"permalink":"/blog/authors/dylanireland"},"title":"Developer Advocate for Casper Association","url":"https://github.com/dylanireland","permalink":"/dylanireland","imageURL":"https://github.com/dylanireland.png","key":"dylanireland"},{"name":"Mel Padden","page":{"permalink":"/blog/authors/melpadden"},"title":"Head of Developer Relations for Casper Association","url":"https://github.com/melpadden","socials":{"x":"https://x.com/mel_casper"},"permalink":"/melpadden","imageURL":"https://github.com/melpadden.png","key":"melpadden"}],"frontMatter":{"title":"Fee Elimination in Condor","description":"A discussion of the Fee Elimination feature in Casper 2.0","slug":"condor-fee-elimination","date":"2024-07-16T22:00","authors":["dylanireland","melpadden"],"tags":["condor","features","tokenomics"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Addressable Entity in Casper 2.0","permalink":"/blog/addressable-entity"},"nextItem":{"title":"Setting Up a Local Casper Condor Network for Development","permalink":"/blog/condor-local-setup"}},"content":"The Casper 2.0 (aka Condor) network upgrade introduces new options to the way a Casper Network can be configured to handle gas consumption. Scheduled along with the release of Condor into Mainnet is a change in the configuration of the Casper Network to use a model known as **Fee Elimination** for gas payments. The purpose of this article is to introduce this model, and describe how Fee Elimination will affect the behavior of the Casper Network once Condor is released.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Concepts\\nPublic distributed blockchain networks that support smart contracts generally employ a concept known as \\"[gas](https://docs.casper.network/concepts/glossary/G/#gas)\\", which can be thought of as \\"the ability to do work on-chain\\". The problem addressed by this mechanism is that **any finite resource on a publicly accessible computer network must be rate-limited**, because a resource made available without limit is a denial of service attack vector. \\n\\nGas is acquired in finite quantities and used to meter and limit resource consumption by individual transactors. A transactor\'s available gas is consumed by their on-chain usage of computation, data storage, and possibly other chain-specific resources. The public Casper Network and its testnet have used such a gas model since their geneses.\\n\\n## Payment, Gas Price, Fees\\nOn Casper 1.x, every transaction is subject to gas consumption. The transactor must specify an amount of token that is converted to gas and used to pay for execution. All gas consumed in each block is allotted to the [proposer](#proposer) of that block in the form of transaction [fees](#fees). The model also includes tables to allow calculation of gas costs, and support for some portion of unconsumed gas to be refunded to transactors. We refer to these concepts using the following terms:\\n\\n* **Gas Limit**: An amount of gas, specified by the transactor, at which to cancel a transaction.\\n* **Gas Price**: The network gas price; the ratio between the cost of 1 unit of gas and 1 mote.\\n* **Gas Cost**: The amount of gas needed to pay for execution of a transaction.\\n* **Payment**: The amount of token specified by the transactor to pay for the execution of a transaction.\\n* **Refund**: All or a portion of the remaining token after gas is purchased for execution.\\n\\n> \\n> The Casper node software supports a number of configurable options which govern how gas may be calculated for a given transaction. A discussion of these is outside the scope of this article. This article is concerned with how these gas costs are dealt with, once calculated. Gas cost options will be the subject of another article.\\n\\n## Fee Elimination\\n\\n> __Fee Elimination is the strategy of placing temporary holds on transactor balances corresponding to their incurred gas costs, instead of taking those costs from their on-chain balances__.\\n\\nUnder 1.x, transactors must pay for gas directly from their purse balances. With Fee Elimination on Casper 2.0, a hold is placed on the calculated **Gas Cost** for a configurable period of time known as the **Hold Period**. Fees are therefore not forfeited by transactors, and funds are not spent to execute transactions.\\n\\n### Holds\\n\\nA hold may be thought of as a temporary freeze on some portion of the funds in an account. The funds never leave the purse upon which the hold is placed, but the owner of those funds may not spend them as long as the hold is in effect, and the funds held are not counted towards the available balance of that purse. \\n\\n### Hold Release\\n\\nThe Casper Node 2.0 software currently supports two hold release models: **Accrued** and **Amortized**. \\n\\n> \\n> The Condor node architecture allows for any time-based function to be developed and used to calculate hold releases. However, for simplicity, this article will deal with the two currently available options.\\n\\n#### Accrued\\n100% of the hold is held until the hold expires. At any given point in the duration of the hold, the effective amount of the hold is 100%. At expiry, all of the funds are again made available to the transactor.\\n\\n#### Amortized\\nThe effective amount of the hold is reduced linearly over the course of the hold duration. At any point in the duration of the hold, the effective hold *amount* is proportional to the percentage of the hold *duration* that remains before expiry. \\n\\nFor example, if:\\n- A hold of 180 CSPR is placed on an purse which holds 1000 CSPR\\n- The configured hold period is 90 days\\n- The hold release model is configured to use amortization\\n\\nThen, 9 days after the hold was placed, the current effective amount of the hold may be calculated by \\n - $\\\\frac{\\\\text{Hold Duration} - \\\\text{Time Elapsed}}{\\\\text{Hold Duration}} = \\\\frac{90 - 9}{90} = 0.9$\\n - Multiplied by the hold amount: $180 \\\\times 0.9 = 162$\\n\\nThe effective balance in that purse, at that point in time, is $1000 - 162 = 838 \\\\ \\\\text{CSPR}$\\n\\nOver the course of the hold\'s duration, this calculation gives us:\\n| Hold Amount | Hold Period | Time Elapsed | Effective Hold |\\n| --- | --- | --- | --- |\\n| 180 | 90 | 1 | 178 |\\n| 180 | 90 | 9 | 162 |\\n| 180 | 90 | 45 | 90 |\\n| 180 | 90 | 89 | 2 |\\n\\n### More about Gas holds \\nThe duration of gas holds is defined [here](https://github.com/casper-network/casper-node/blob/feat-2.0/resources/production/chainspec.toml#L166) in the [casper-node](https://github.com/casper-network/casper-node) chainspec:\\n\\n```toml\\n# If fee_handling is set to \'no_fee\', the system places a balance hold on the payer\\n# equal to the value the fee would have been. Such balance holds expire after a time\\n# interval has elapsed. This setting controls how long that interval is. The available\\n# balance of a purse equals its total balance minus the held amount(s) of non-expired\\n# holds (see gas_hold_balance_handling setting for details of how that is calculated).\\n#\\n# For instance, if gas_hold_interval is 24 hours and 100 gas is used from a purse,\\n# a hold for 100 is placed on that purse and is considered when calculating total balance\\n# for 24 hours starting from the block_time when the hold was placed.\\ngas_hold_interval = \'24 hours\'\\n```\\n\\n\\n### Preventing Exploitation\\nThe ultimate goal of any gas mechanism is to prevent exploitation of a network\'s resources. Aside from incentivizing validators, there is no fundamental reason to charge users for making transactions if their honesty can be guaranteed. By designing a system that disincentivizes wasteful transactions without charging a fee, resistance to exploitation can be maintained while allowing users to transact freely.\\n\\nHowever, any gas mechanism that doesn\'t charge users could be vulnerable to denial-of-service attacks. Provided a large enough bankroll, a user could deploy enough transactions to slow the network for the amount of time needed for his or her previous gas payments to unlock, and use these unlocked funds to deploy more transactions, and thus repeat the process ad infinitum. In this way, one could theoretically deploy infinite transactions, cycling through their locked and unlocked balances. \\n\\nAttacking the network in this way is a challenge of economic feasibility, much like many other aspects of blockchains. To prevent an attack like this from taking place, it must be made prohibitively expensive to mount such an attack, with little to no incentive to the attacker. Casper\'s approach involves using a long locking period, combined with 16 second blocktimes. The Casper 2.0 mainnet is slated to roll out with a 30 day locking period, but if increased, the cost to attack would scale linearly.\\n\\nConsidering a token locking period of 30 days and the **Accrued** unlocking schedule, purchasing just 1% of the total block space of each block would cost:\\n\\n$\\\\frac{T}{B} \\\\cdot \\\\frac{G}{100} = 5,346,000 \\\\, \\\\text{CSPR}$\\n\\nWhere:\\n\\n* `T` = 30 day locking period\\n* `B` = 16 second blocktime\\n* `G` = 3300 CSPR block gas limit\\n\\nIf this proves to be too cheap, the locking period can be extended or the block gas limit increased.\\n\\n#### Opportunity Cost\\nIn addition to the necessity to maintain large amounts of CSPR token in order to facilitate a DoS attack as laid out above, any prospective attacker would also incur the opportunity cost of being unable to use their CSPR for the duration of the hold period. Simply put, while their CSPR is locked up attacking the network, it cannot be used to earn rewards by staking. Given the amount of CSPR necessarily involved, and assuming any non-trivial potential annualized return on staking CSPR tokens, the ratio of opportunity cost of mounting such an attack versus the incentive to do so swiftly becomes prohibitively high. \\n\\n### Incentivizing Validators\\n\\nThe Casper Network, like any truly decentralized blockchain, allows nodes to act in their greatest economic interest when it comes to validating transactions. The purpose of this is to incentivize validators as much as possible, encouraging more to come online. Part of the income a validator earns comes from fees paid by a deployer, which entices validators to pick up their transactions. When no fee is paid by the deployer at all, however, another incentive must be provided to the validators.\\n\\nCasper\'s solution is quite simple, but requires understanding how validators are selected and compensated. On Casper Networks, 100 validators are weightily selected to validate all the blocks within the current \\"[era](https://docs.casper.network/concepts/glossary/E/#era)\\", which advances every 2 hours. At the end of each era, validator rewards are calculated, put into a pot, and distributed to validators based on the amount of token staked by each. Additionally, a \\"validator credit\\" is added to validators who propose populated blocks, proportional to the size of the blocks they propose. This validator credit is then applied to the payout scheme, awarding more of the pot to the hardest-working nodes. Additionally, the validator credit is considered as additional staking weight for the next era when the next [booking block](https://docs.casper.network/concepts/glossary/B/#booking-block) appears.\\n\\n## Looking Forward\\n\\nBy introducing Fee Elimination to the Casper Network, we hope to make transacting with the blockchain more accessible and less financially cumbersome. With this new model, interacting with smart contracts can become effectively free for users, inviting larger audiences to participate in new and exciting protocols.\\n\\nAs the model is rolled out to Casper\'s mainnet and testnet, economists and engineers will study its effects on Casper\'s transaction economy. The data observed will be used to devise proposals and improvements, need they be implemented.\\n\\n---\\n### Further Reading/Terms\\n\\n#### Proposer\\nA validator proposing a block to the network for execution  \\n[Consensus](https://docs.casper.network/concepts/economics/consensus/)  \\n[Validator](https://docs.casper.network/concepts/glossary/V/#validator)\\n\\n#### Fees\\nA portion of a transaction\'s gas costs given over to the proposer of the block containing that transaction.  \\n[Gas Concepts](https://docs.casper.network/concepts/economics/gas-concepts/)  \\n[Runtime Economics](https://docs.casper.network/runtime/)  \\n[Validator Rewards](https://docs.casper.network/concepts/glossary/R/#reward)"},{"id":"condor-local-setup","metadata":{"permalink":"/blog/condor-local-setup","source":"@site/blog/2024-07-16-setting-up-condor-local.md","title":"Setting Up a Local Casper Condor Network for Development","description":"How to set up a local Casper Condor Network for Development using CCTL and the Rust Casper client.","date":"2024-07-16T18:00:00.000Z","tags":[{"inline":false,"label":"Condor","permalink":"/blog/tags/condor","description":"Blog posts related to the Condor upgrade"},{"inline":false,"label":"Setup","permalink":"/blog/tags/setup","description":"Getting set up on Casper"}],"readingTime":2.72,"hasTruncateMarker":true,"authors":[{"name":"Stanislaw Czembor","page":{"permalink":"/blog/authors/sczembor"},"title":"Developer Advocate for Casper Association","url":"https://github.com/sczembor","permalink":"/sczembor","imageURL":"https://github.com/sczembor.png","key":"sczembor"}],"frontMatter":{"title":"Setting Up a Local Casper Condor Network for Development","description":"How to set up a local Casper Condor Network for Development using CCTL and the Rust Casper client.","slug":"condor-local-setup","date":"2024-07-16T18:00","authors":["sczembor"],"tags":["condor","setup"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Fee Elimination in Condor","permalink":"/blog/condor-fee-elimination"}},"content":"Casper Condor is a major upgrade to the Casper Network. This guide walks you through creating a local Condor environment for testing and development using Dockerized NCTL and the Rust Casper Client.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Prerequisites\\n\\n* Docker installed and running on your machine \\n\\n## Part 1: The Dockerized NCTL (Network Control Tool)\\n\\nNCTL is your tool for managing the Casper network. We\'ll use a Dockerized version for easier setup.\\n\\n1. **Clone the Repository:**\\n   ```bash\\n   git clone https://github.com/make-software/casper-nctl-docker.git\\n   cd casper-nctl-docker\\n   ```\\n\\n2. **Switch to the Condor Branch:**\\n   ```bash\\n   git checkout feat-2.0\\n   ```\\n\\n3. **Clone the `casper-node` Repository:**\\n   ```bash\\n   git clone https://github.com/casper-network/casper-node.git\\n   cd casper-node\\n   git checkout release-2.0.0-rc3\\n   ```\\n   Ensure you\'re in the `casper-nctl-docker` directory when running this command\\n\\n4. **Build the Docker Image:**\\n   ```bash\\n   docker build -f casper-nctl-condor.Dockerfile -t casper-nctl:rc3 .\\n   ```\\n   This may take a while\\n\\n5. **Verify the Image:**\\n   ```bash\\n   docker image ls\\n   ```\\n   Look for the `casper-nctl:rc3` image in the output\\n   ```\\n   REPOSITORY                 TAG        IMAGE ID       CREATED        SIZE\\n   casper-nctl                rc3        9fd1e7b25d42   40 hours ago   433MB\\n   ```\\n\\n6. **Start the NCTL Docker Container:**\\n   * **Docker Compose (Recommended):** If you\'re using the `docker-compose.yml` file, make sure that  the `image` under the `mynctl` service points to `casper-nctl:rc3`. Then run `docker-compose up`.\\n   * **Manual Docker Command:** \\n      ```bash\\n      docker run -d --name mynctl -p 11101:11101 casper-nctl:rc3\\n      ```\\n\\n      Once it is up and running you should see that there are 5 nodes and 5 sidecars running and another 5 nodes and 5 sidecars that are inactive:\\n     ```\\n      casper-nctl  | validators-1:casper-net-1-node-1       RUNNING   pid 996, uptime 0:00:03\\n      casper-nctl  | validators-1:casper-net-1-node-2       RUNNING   pid 998, uptime 0:00:03\\n      casper-nctl  | validators-1:casper-net-1-node-3       RUNNING   pid 1002, uptime 0:00:03\\n      casper-nctl  | validators-1:casper-net-1-sidecar-1    RUNNING   pid 997, uptime 0:00:03\\n      casper-nctl  | validators-1:casper-net-1-sidecar-2    RUNNING   pid 1000, uptime 0:00:03\\n      casper-nctl  | validators-1:casper-net-1-sidecar-3    RUNNING   pid 1011, uptime 0:00:03\\n      casper-nctl  | validators-2:casper-net-1-node-4       RUNNING   pid 1082, uptime 0:00:02\\n      casper-nctl  | validators-2:casper-net-1-node-5       RUNNING   pid 1084, uptime 0:00:02\\n      casper-nctl  | validators-2:casper-net-1-sidecar-4    RUNNING   pid 1083, uptime 0:00:02\\n      casper-nctl  | validators-2:casper-net-1-sidecar-5    RUNNING   pid 1085, uptime 0:00:02\\n      casper-nctl  | validators-3:casper-net-1-node-10      STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-node-6       STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-node-7       STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-node-8       STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-node-9       STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-sidecar-10   STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-sidecar-6    STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-sidecar-7    STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-sidecar-8    STOPPED   Not started\\n      casper-nctl  | validators-3:casper-net-1-sidecar-9    STOPPED   Not started\\n     ```\\n\\n\\n## Part 2: Casper Client (Rust)\\n\\nTo interact with your local Condor network, we\'ll use the Casper Client. You have two options for using the Casper Client:\\n\\n**Option 1: Using the Casper Client from the Docker Image**\\n\\n* The `casper-nctl:rc3` Docker image already includes the `casper-client`.\\n* You can skip the next two steps if you want to use the pre-installed client.\\n\\n**Option 2: Using Your Local Casper Client**\\n\\n1. **Clone the Repository (Optional):**\\n   ```bash\\n   git clone https://github.com/casper-ecosystem/casper-client-rs.git\\n   cd casper-client-rs\\n   ```\\n\\n2. **Switch to the Condor-Compatible Branch  (Optional):**\\n   ```bash\\n   git checkout feat-track-node-2.0\\n   ```\\n\\n3. **Activate NCTL scripts:**\\n   ```bash\\n   source nctl-activate.sh casper-nctl\\n   ```\\n\\n4 **Test Your Setup:**\\n   ```bash\\n   nctl-view-node-status\\n   ```\\n   This command should return the status of all the nodes running in your local network, indicating a successful setup. The output should look similar to this:\\n   ```\\n   ------------------------------------------------------------------------------------------------------------------------------------\\n   2024-07-10T15:31:42.181535 [INFO] [2043] NCTL :: node #1 :: status:\\n   {\\n   \\"api_version\\": \\"2.0.0\\",\\n   \\"peers\\": [\\n      {\\n         \\"node_id\\": \\"tls:05b5..7b39\\",\\n         \\"address\\": \\"127.0.0.1:22103\\"\\n      },\\n      {\\n         \\"node_id\\": \\"tls:527e..37d2\\",\\n         \\"address\\": \\"127.0.0.1:22105\\"\\n      },\\n      {\\n         \\"node_id\\": \\"tls:b1d0..870f\\",\\n         \\"address\\": \\"127.0.0.1:22102\\"\\n      },\\n      {\\n         \\"node_id\\": \\"tls:dcdf..e348\\",\\n         \\"address\\": \\"127.0.0.1:22104\\"\\n      }\\n   ],\\n   \\"build_version\\": \\"2.0.0-d5c0d238f\\",\\n   \\"chainspec_name\\": \\"casper-net-1\\",\\n   \\"starting_state_root_hash\\": \\"2d92cf9f3ff3eb70f40be598b61cbf747c1b5ea67df9596d84a88c5458028a80\\",\\n   \\"last_added_block_info\\": {\\n      \\"hash\\": \\"c1056e0e5978e725777f48e4488462d7794e6547f25b1fbcc4ba261ca2864395\\",\\n      \\"timestamp\\": \\"2024-07-10T15:31:38.601Z\\",\\n      \\"era_id\\": 19,\\n      \\"height\\": 205,\\n      \\"state_root_hash\\": \\"6c5502c3443f526e943fa5a5421349e938464c063c8dd0ada616c997e3805612\\",\\n      \\"creator\\": \\"0190664e16a17594ed2d0e3c279c4cf5894e8db0da15e3b91c938562a1caae32ab\\"\\n   },\\n   \\"our_public_signing_key\\": \\"01fed662dc7f1f7af43ad785ba07a8cc05b7a96f9ee69613cfde43bc56bec1140b\\",\\n   \\"round_length\\": \\"4s 96ms\\",\\n   \\"next_upgrade\\": null,\\n   \\"uptime\\": \\"13m 15s\\",\\n   \\"reactor_state\\": \\"Validate\\",\\n   \\"last_progress\\": \\"2024-07-10T15:18:26.354Z\\",\\n   \\"available_block_range\\": {\\n      \\"low\\": 0,\\n      \\"high\\": 205\\n   },\\n   \\"block_sync\\": {\\n      \\"historical\\": null,\\n      \\"forward\\": null\\n   },\\n   \\"latest_switch_block_hash\\": \\"5192198c783ed8b66e206c37b34c5e268c84be2f4b78dd9899eecf5f37fb9f68\\"\\n   }\\n   .\\n   .\\n   .\\n   ```\\n\\n## Troubleshooting\\n\\n**If sidecars or nodes are not running:** If you see `null` values under each node in the output of `nctl-view-node-status`, it means the version of `casper-sidecar` is not compatible with the `casper-node`.\\n\\n**Solution:**\\n1. Go to the `casper-node/ci/ci.json` file.\\n2. Change the `casper-sidecar` branch under `external_deps` from:\\n   ```json\\n   \\"branch\\": \\"feat-2.0\\"\\n   ``` \\n   to:\\n   ```json\\n   \\"branch\\": \\"release-1.0.0rc2_node-2.0.0rc3\\" \\n   ```\\n\\n   This is because the `casper-node` we are using is `release-2.0.0-rc3`. The required combination of versions of `casper-sidecar` and `casper-node` may change in the future (rc4 etc.).\\n\\n3. Rebuild the NCTL image: `docker build -f casper-nctl-condor.Dockerfile -t casper-nctl:rc3 .`\\n\\n## Using the Casper Client\\n\\n* **Command Format(Using local casper-client):** `cargo run --release [command] --node-address http://127.0.0.1:11101`\\n* **Command Format(Using casper-client from the docker image):** `casper-client [command] --node-address http://127.0.0.1:11101`\\n\\n## Accessing the NCTL Block Web Explorer\\n\\nThe NCTL Docker setup includes a web-based block explorer.  You can access it in your browser at:\\n\\n```\\nhttp://127.0.0.1:8080\\n```\\n\\nThis allows you to visually explore blocks, transactions, and other details of your local network.\\n\\n## Important Notes\\n\\n* **Work in Progress:** Condor compatibility is still evolving. Some features may be unstable or incomplete.\\n\\n## Additional Tips\\n\\n* **Community Resources:** Join the [Casper Telegram](https://t.me/CSPRCondor) for help and discussion."}]}}')}}]);